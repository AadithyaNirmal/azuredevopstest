# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master
- dev

pool:
  vmImage: 'ubuntu-latest'
name: ${Date:yyyMMdd}${Rev:.r}
variables:
  - group: aws_variables
  - name: CODECOMMIT_PK
    value: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0NCmIzQmxibk56YUMxclpYa3RkakVBQUFBQUJHNXZibVVBQUFBRWJtOXVaUUFBQUFBQUFBQUJBQUFCbHdBQUFBZHpjMmd0Y24NCk5oQUFBQUF3RUFBUUFBQVlFQTBvRGRXZzAvK3pPSjNzK3lhTWNYRy9DM1ZYbHpHYWdhK0JBbnFTazdnR2J4VTZ5cjdjNysNCnpUa1RTYkNJcXVCY3pTZ2FVc2p4VXBvS2RMRUpiUUFoc3g2UWE3QzdCTE9EKzR2NXV3Y0hMdEZLZ1VuSGNLQVdnSGZEOWMNCnRaTHA1b3NQK0t1MkFPVGhQU0U1UnVmOWNmVGx3d1lNa1gvTWZ3VWMxdmtHNXFVcDhNcnM3ajJzS09UMmJFZUo1RUhacVINClRyZmc4TDRNOEdBL3VZbjRORUdZMmQvTkhueWRqbzR0QWFHRXl3ak1aZWhFSzBvR3NLRTFIdWlvMDRTSjF6MDJmZytsNTYNCnBRNTdyaGIvVUVXWDFwT3NlaGU4SzF1NGgrT0o2azhwRFYrYWpmTk9MZFI2Y1VVZElzVmQxMmt3Y2plZm5DUDhpNHluTXoNCjhsbDFSM2U5YVNKc2VQR0laQVM2K1dmMXZXUzVhSmxpM2lmMmpOeEQ1V0Z4Zll3T3JnU3ArOWhSNElTUDhqNUhCYzN1Ui8NCmRuM0E2REdhdFl2RHhLQnNwSlpTU2k1RnFqanpFZnJyT2hVK1JkbituSWNDQUs0VytZT3RSdXdsZ2Z1ZkhuOUVsVjNTbVgNCk5rMHZIaW9NTTZXNXh2WDl5cWYvRzl6UTdjems2d1FhS3lBN2grbmZBQUFGa0tUbTdaT2s1dTJUQUFBQUIzTnphQzF5YzINCkVBQUFHQkFOS0EzVm9OUC9zemlkN1BzbWpIRnh2d3QxVjVjeG1vR3ZnUUo2a3BPNEJtOFZPc3ErM08vczA1RTBtd2lLcmcNClhNMG9HbExJOFZLYUNuU3hDVzBBSWJNZWtHdXd1d1N6Zy91TCtic0hCeTdSU29GSngzQ2dGb0Izdy9YTFdTNmVhTEQvaXINCnRnRGs0VDBoT1Vibi9YSDA1Y01HREpGL3pIOEZITmI1QnVhbEtmREs3TzQ5ckNqazlteEhpZVJCMmFrVTYzNFBDK0RQQmcNClA3bUorRFJCbU5uZnpSNThuWTZPTFFHaGhNc0l6R1hvUkN0S0JyQ2hOUjdvcU5PRWlkYzlObjRQcGVlcVVPZTY0Vy8xQkYNCmw5YVRySG9YdkN0YnVJZmppZXBQS1ExZm1vM3pUaTNVZW5GRkhTTEZYZGRwTUhJM241d2ovSXVNcHpNL0paZFVkM3ZXa2kNCmJIanhpR1FFdXZsbjliMWt1V2laWXQ0bjlvemNRK1ZoY1gyTURxNEVxZnZZVWVDRWovSStSd1hON2tmM1o5d09neG1yV0wNCnc4U2diS1NXVWtvdVJhbzQ4eEg2NnpvVlBrWFovcHlIQWdDdUZ2bURyVWJzSllIN254NS9SSlZkMHBselpOTHg0cURET2wNCnVjYjEvY3FuL3h2YzBPM001T3NFR2lzZ080ZnAzd0FBQUFNQkFBRUFBQUdBYVloaGNMd2p6M1JQTW4wK0hIbHpoSFp4ODENCkFuL0R6akNHcFE5K1hNQnR1Vk1UWG9IQmtpZFJDZ010bG1Ld1RBZ2JvUk9GKzFYSXdOb2VML3JyM2FKMHF6Yk1uMWVLM24NCkJUMXZ2ZXdRRmRDbllabnpldXRIWExDdWRaTzA2a0pRaWl3VENVMW0zbzNoVEIrbUprRmJXSld2UzFhRnlCMFV4bTRQK0kNCkRpblBsUUNuTittRFhoMHJ6YTB2M0ZlSEg5VjFHb1hBbHJ3emI5dTY4SDJHcnFqcEE4N1lQY0daUDl6RXVGbjZTUmxLV1YNClIzNmRUQUFGK2JENnN0QkhxcmpzcUFKbW82RnE4QWVBRTJWRjkrZll1Z01FcmUxOVJ3alBVcmdJaTlXK3BmdVFmaDBPbUcNCmpBUXdVWWRLQWNPRVpFeS9hWnNwb3pJTjlOeGRUN2xEZmZOQzBnb2kzZDdMelNNU0RwSStKSy9xS2xpVG9tL3dPZjBPWkwNCmh6ZkR3Y0tOZHhvQTlKU09INi9JMjRCYnNMUmxtZjRNbXVoSkppRExLWUVnanNSa1JIdzBRQ0JleG0rT0tiL1YwMHhsaksNCnZIUkluV0l2NGg0eVBUOWVZdlNZcklvandkZHRZL3I1UHpGSDVWOWYwK1llTUgrL1VvcU5XN015bWV3WThqZjFlQkFBQUENCndEZzc0SHFENFgxYUlKbUFvdE1UbVg4eW0yWmZGZEx5MU1nSXB3M1UxZWN2Mm1sWndOWU42Q2pwOW9Lemd5NVkxZlJhUFINClkvYkRneE9IeThvSmZHeHZXYlVrNHd2ZXNVdnhSOWl0YmpTTEVNQlNVQmZWdVFvNGRtOW9LdmdGMGpBT1JtK3dVZGxjL3YNCmNHTXFKNmd1M3V4TTRSZVUwUTRENElOKzkvSEZTQXhDZnhFWXFacFl2Si9jVWJWaWtNTmx3eEJjWWxYempwc0ZHbk1VOGUNCjljbG1TY3JZUGlvc0tSQVo2aS81Y0k5NUJGKzN6d1ZSVklkMFoxZ0hNRXozUVNYZ0FBQU1FQTdiU3hvc0VEVUF0b3pQb28NCk1QRm9LSzI3eEFZK3I3a2J1d3FwT25ESG1sbnFmUk93ZFhXY3ZCaVJ0N1ZhNW1WRVc1bU9jY1d2Y2NQZjlnRis1Z0p2anMNCndOOFEwNXRPakZuRUttaGxQaUJyOFRGTmh4Ym1palNRU2hTY015NHlJcGd4azFYM3VqWDk0MytaTWdkOVBxNVVrRk9VZVINCjYwNGgydU5saHRQTW92azlGVXFockhkd2dzRVBKQ3dtOXNoZ1k3YnBtWjRFUnYwNGdSSVdjbGJxRVU4Tlh5K2E1YVFUOVQNCnBaUEIxTVJMODZIdTNuSFZFMDgyRGQxSzRBSTJ3NUFBQUF3UURpdERtWkwwQmQ0bFYxWDRRNm8rOWFrSmE4SlJpem45WjINCnlmQVlZVXlOR3d0MDBpRmZJZUQxdk9GcUNzNGhMTVY3aVZ3djEvdDhFaUxENlQrc3FySk5Mc0FtS240NU40U096UGRwMXgNCkZZSmJPYzdxZEVwQ0dhb2NmdWNmR1kyRWtMaTBBTGJzRW52WTJ1bUw3WVRiTlVuYXdPdWlOVWY5Rnk3WHMyZWxPcGFPL1MNCjBCK1Zpa0h5d0RONEM3b1dTUnllbjlwWmZ5Nng2ZmFxelRQdTAyekJLR1RxbU1KOUQ1UlNPdXp4cTVmSlY1VVA1NVdlWVYNCm9BOHpHSGhMU1VOdGNBQUFBWGJHOWpiMkZzYVdWdVFHMWhZMnQzYjNKcmN5MU5RbEFCQWdNRQ0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tDQo=
strategy:
  matrix:
    Python27:
      python.version: '2.7'
    Python35:
      python.version: '3.5'
    Python36:
      python.version: '3.6'
 
steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'
- script: |
    git checkout ${BUILD_SOURCEBRANCHNAME}
    AWS_CODECOMMIT_REPO="ssh://git-codecommit.${CODECOMMIT_REGION}.amazonaws.com/v1/repos/${CODECOMMIT_NAME}"
    mkdir ~/.ssh
    echo ${CODECOMMIT_PK} > ~/.ssh/codecommit_rsa.tmp
    base64 -d ~/.ssh/codecommit_rsa.tmp > ~/.ssh/aws_rsa
    cat ~/.ssh/aws_rsa
    chmod 600 ~/.ssh/aws_rsa 
    cat <<EOF > ~/.ssh/config
      Host git-codecommit.*.amazonaws.com
      User ${CODECOMMIT_USER}
      IdentityFile ~/.ssh/aws_rsa
    EOF
    set +e
    ssh -o StrictHostKeyChecking=no git-codecommit.${CODECOMMIT_REGION}.amazonaws.com
    set -e
    git remote set-url origin --push ${AWS_CODECOMMIT_REPO}
    git push origin ${BUILD_SOURCEBRANCHNAME}
- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Install dependencies'

- script: |
    pip install pytest pytest-azurepipelines
    pytest
  displayName: 'pytest'

- task: PythonScript@0
  inputs:
    scriptSource: inline
    script: |
      import sys
      print ('Executing script file is:', str(sys.argv[0]))
      print ('The arguments are:', str(sys.argv))
      import argparse
      parser = argparse.ArgumentParser()
      parser.add_argument("--world", help="Provide the name of the world to greet.")
      args = parser.parse_args()
      print ('Hello ', args.world)
    arguments: --world Venus

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: '**/test-*.xml'
    testRunTitle: 'Publish test results for Python $(python.version)'
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'