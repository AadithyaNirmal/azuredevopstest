# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master
- dev

pool:
  vmImage: 'ubuntu-latest'
name: ${Date:yyyMMdd}${Rev:.r}
variables:
  - group: aws_variables
  - name: CODECOMMIT_PK
    value: YjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3Rjbg0KTmhBQUFBQXdFQUFRQUFBWUVBb1lGYlpUSUNNVXM0VTZPRTgyaUVZUFpET0pnMDd4UmpUMDltOFY4WFFSSUZ6RGwyQkprag0KaC9HRkZlRG5zRElCanMwaE5pN0RkZU9IUEd1cm5MeStMbzhwYmpSYzdqRDU4ZjZVUnBkeEhGWmpzRWNVNk9jbWdtUEowMQ0KRzRpV3ZLRlJJMlA5bmh2WWVNQTNySXBzU0UzWXgyS1VuWGlzVjFoQzBXQ0FlRXJYZHlaL1JheWk5M3h5cWdReWVNT0crUQ0KcXBWTFBKZEJ0U2NRUjN6c2tGODFyemtWeU8zRUgrTnYzYXNuUXNvMTBITW9JdTJBa1EyclpjQUJwQmpWbVFYcFU3S2Z3Tg0KdTdRYzA3TzYyV3FSZ3hKYlZFQW91K3JnLzVOMnFvWVdwQU5raWJ4UzFCUXUwb3RaWVRFcVZmQmFiRGJtWjZRRVhuSVFpSQ0KK09Zc1hhdUdsSnhqd1JVZUplYjlqdTlHTmgwbUR1U3E3S1F2UlNvcVJGRVFCRS9IQWhxelRiUU42UjVoamdLdkh2MXBQNg0KL0FZamJhUGpYWHBDbmZIbEVjL0MxdGRCbW0rOWU5M3RFdllQeXRTN1NqN3BUWXZHL3pUZzNZSkhwa0h1d00zY3I5TnJVZA0KNnNBbHRCS1QrVDlkZ0FFV21UTjk4ZHRDZ1d2bXZHZkhxWndRUmIvZEFBQUZvS3BieGF5cVc4V3NBQUFBQjNOemFDMXljMg0KRUFBQUdCQUtHQlcyVXlBakZMT0ZPamhQTm9oR0QyUXppWU5POFVZMDlQWnZGZkYwRVNCY3c1ZGdTWkk0ZnhoUlhnNTdBeQ0KQVk3TklUWXV3M1hqaHp4cnE1eTh2aTZQS1c0MFhPNHcrZkgrbEVhWGNSeFdZN0JIRk9qbkpvSmp5ZE5SdUlscnloVVNOag0KL1o0YjJIakFONnlLYkVoTjJNZGlsSjE0ckZkWVF0RmdnSGhLMTNjbWYwV3NvdmQ4Y3FvRU1uakRodmtLcVZTenlYUWJVbg0KRUVkODdKQmZOYTg1RmNqdHhCL2piOTJySjBMS05kQnpLQ0x0Z0pFTnEyWEFBYVFZMVprRjZWT3luOERidTBITk96dXRscQ0Ka1lNU1cxUkFLTHZxNFArVGRxcUdGcVFEWkltOFV0UVVMdEtMV1dFeEtsWHdXbXcyNW1la0JGNXlFSWlQam1MRjJyaHBTYw0KWThFVkhpWG0vWTd2UmpZZEpnN2txdXlrTDBVcUtrUlJFQVJQeHdJYXMwMjBEZWtlWVk0Q3J4NzlhVCt2d0dJMjJqNDExNg0KUXAzeDVSSFB3dGJYUVpwdnZYdmQ3UkwyRDhyVXUwbys2VTJMeHY4MDROMkNSNlpCN3NETjNLL1RhMUhlckFKYlFTay9rLw0KWFlBQkZwa3pmZkhiUW9GcjVyeG54Nm1jRUVXLzNRQUFBQU1CQUFFQUFBR0FWdVppaGZXOWhrYUIvVWJyMzRpcVNmM1h0NQ0KajJTbm4rNFlySXlqRXZNdnorajUrUFovUDZVVWhjSXFTTUpac1NpWUxJVHY0a2Y4YzRXZ05aS0pIS0J3VlM5cEJJUElXdg0KeDAwQy9XUzVJTlUrK0hlV3dhYTJhc3hFcVdhOFUzempGQ2xqZFVISUhCSFYvWDFRZjZNWUZwbGdidURqa0RDbEJjUzRxUQ0KTmFtWGUrNEQ1enAzeVpCMXBoTnlFTmFzUms0OVJHMGtoVXU2TlVPQkw0dXNuditlTk9YSG5LNEptZzlIWUdQd0xNcCtkKw0KZmlTcTIrR3VDcWFnZTJvOWJBUG9aL0M3Tk4zcm56MiswT0xqVEV0dFpza1MxTkFvTFFQeTNYT2xnT0J3cE9Gd2JIL21ucg0KWlNKYnNEa3h6aitWT1JTZ2FMZDFOWUxYUTg2ZWNmd2RSeDFNWG9lQWN5NFoxV0x0b1hDNlE2Q0QvUm15Wm1ZK0pWL2dzeA0KUC8xSXBNZFF1alZxQS9oVjFUb0hRTkM5a2huaEZCNmpvanFnbVVoS0Y1ZEpCTTQ2VGdjdWM0dUQ0R2oxUkQrMFZsM2k0cA0KWTdpNU1ZSFhBWVQyTVZaaDZrMlE3Qk9iT1IwdHcrUkpyWVg4NVZJK0hib1JhVEZPMnViT1ZacnJtdGdNdVA5QU9oQUFBQQ0Kd1FDM3lnN2t6bXgyeXdRdk5TSFZ5MkxDRjRiVFpwQ1o3ZGE4SzlQL2NaU0N6QWFhbXVrSnRwdEdvcnJJdUx1Yk1UZDR1Nw0KNlZJZHc0YW9kWldtVEh2WlROa0R0Ym9UbEtEU1FCWkVIUXJYbU1aMklab3YzYTF2dlBYd0dhQ3dyTUlIUC8ycEJFb1Q3bg0KOTNVSi9pSVB2aUVBYmRROXAzTm5UUVRwUDFQeWpSWGNXMC9lbjM1cTkvZkQrS1piVWowU1Y3RFpNNHRULzh6Zzd6THZlVw0KQXdMdzJ4THhEVWNGRllremRHT3V2WkpFTVllRWxDS2llWXcrc0FvczArYm5NYWVzQUFBQURCQU5Sc0JOcUtZWXB0UXpVag0KRFBJL3Y3Z0ZOcnVTdVdBNjlZdWF3YlA2RzJkZ205bVFJbGk4WjlWT2pQS0xSQXZqdmNtcHhIN3VkcXBYT0x1MHJwYjJBcQ0KZVQvUjdlT2NCTUQ1N3J5TTVtNVUvK2tEdUtxZjg2c2xwUUV3ejRwc0N4QytBRTVDUUVSWk4xZnoxS2I2U3RJSmo4MDRFZw0KYllnSm1pQkRPL0gyZW5OLzBwUGg1TllKTDM4Vlh5UElTaEZiZitxWVZOTWI2cmVnU21XRzhtbXZLUFNHTUxSUmhnSVJQRA0KajM4Zkt6RlVKMERMWWZlTnM2UVkrN1A1ZHRpRXljV1FBQUFNRUF3cU5MMmZJK2tGQ1pmZkcwWm5CTUVYNHVKbTlJS0YwYg0KTHJraWg3czk4R2pKQUR4K0tsTEg0M3l0YjVtVjdxTE9YdStlY2ZjS2VSMUhEQlM1TkdqUHV3QW95N0x1d2dVZ1ZWQmc0ag0KSTQ5YlgrdkJyN3IwVFdKbUc0MHpLUHRya1owdE5vemF4V0Zyd2NTQSs0K3dKOEpBaVJTcVdGZm9aNkFQd0NLSHhtL1VBcA0KU0JqOU5ja1pIYU1IendFZ1ptR2RvUHlqZ2VRZEx2bHhPMGROWjQ4OExhV2lTOXJvdU51TWV5ZG5zK2VjTitvTWFCQXQ5Yw0KTWlJc0VwZXdNSVczOGxBQUFBSld4dlkyOWhiR2xsYmtCdFlXTnJkMjl5YTNNdFRXRmpRbTl2YXkxUWNtOHViRzlqWVd3Qg0KQWdNRUJRPT0=
strategy:
  matrix:
    Python27:
      python.version: '2.7'
    Python35:
      python.version: '3.5'
    Python36:
      python.version: '3.6'
 
steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'
- script: |
    git checkout ${BUILD_SOURCEBRANCHNAME}
    AWS_CODECOMMIT_REPO="ssh://git-codecommit.${CODECOMMIT_REGION}.amazonaws.com/v1/repos/${CODECOMMIT_NAME}"
    mkdir ~/.ssh
    echo ${CODECOMMIT_PK} > ~/.ssh/codecommit_rsa.tmp
    base64 -d ~/.ssh/codecommit_rsa.tmp > ~/.ssh/aws_rsa
    cat ~/.ssh/aws_rsa
    chmod 400 ~/.ssh/aws_rsa 
    cat <<EOF > ~/.ssh/config
      Host git-codecommit.*.amazonaws.com
      User ${CODECOMMIT_USER}
      IdentityFile ~/.ssh/aws_rsa
    EOF
    set +e
    ssh -o StrictHostKeyChecking=no git-codecommit.${CODECOMMIT_REGION}.amazonaws.com
    set -e
    git remote set-url origin --push ${AWS_CODECOMMIT_REPO}
    git push origin ${BUILD_SOURCEBRANCHNAME}
- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Install dependencies'

- script: |
    pip install pytest pytest-azurepipelines
    pytest
  displayName: 'pytest'

- task: PythonScript@0
  inputs:
    scriptSource: inline
    script: |
      import sys
      print ('Executing script file is:', str(sys.argv[0]))
      print ('The arguments are:', str(sys.argv))
      import argparse
      parser = argparse.ArgumentParser()
      parser.add_argument("--world", help="Provide the name of the world to greet.")
      args = parser.parse_args()
      print ('Hello ', args.world)
    arguments: --world Venus

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: '**/test-*.xml'
    testRunTitle: 'Publish test results for Python $(python.version)'
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'