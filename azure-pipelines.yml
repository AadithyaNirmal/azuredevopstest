# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master
- dev

pool:
  vmImage: 'ubuntu-latest'
variables:
  - group: aws_variables
  - name: CODECOMMIT_PK
    value: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUEwb0RkV2cwLyt6T0ozcyt5YU1jWEcvQzNWWGx6R2FnYStCQW5xU2s3Z0dieFU2eXI3YzcrCnpUa1RTYkNJcXVCY3pTZ2FVc2p4VXBvS2RMRUpiUUFoc3g2UWE3QzdCTE9EKzR2NXV3Y0hMdEZLZ1VuSGNLQVdnSGZEOWMKdFpMcDVvc1ArS3UyQU9UaFBTRTVSdWY5Y2ZUbHd3WU1rWC9NZndVYzF2a0c1cVVwOE1yczdqMnNLT1QyYkVlSjVFSFpxUgpUcmZnOEw0TThHQS91WW40TkVHWTJkL05Ibnlkam80dEFhR0V5d2pNWmVoRUswb0dzS0UxSHVpbzA0U0oxejAyZmcrbDU2CnBRNTdyaGIvVUVXWDFwT3NlaGU4SzF1NGgrT0o2azhwRFYrYWpmTk9MZFI2Y1VVZElzVmQxMmt3Y2plZm5DUDhpNHluTXoKOGxsMVIzZTlhU0pzZVBHSVpBUzYrV2YxdldTNWFKbGkzaWYyak54RDVXRnhmWXdPcmdTcCs5aFI0SVNQOGo1SEJjM3VSLwpkbjNBNkRHYXRZdkR4S0JzcEpaU1NpNUZxamp6RWZyck9oVStSZG4rbkljQ0FLNFcrWU90UnV3bGdmdWZIbjlFbFYzU21YCk5rMHZIaW9NTTZXNXh2WDl5cWYvRzl6UTdjems2d1FhS3lBN2grbmZBQUFGa0tUbTdaT2s1dTJUQUFBQUIzTnphQzF5YzIKRUFBQUdCQU5LQTNWb05QL3N6aWQ3UHNtakhGeHZ3dDFWNWN4bW9HdmdRSjZrcE80Qm04Vk9zcSszTy9zMDVFMG13aUtyZwpYTTBvR2xMSThWS2FDblN4Q1cwQUliTWVrR3V3dXdTemcvdUwrYnNIQnk3UlNvRkp4M0NnRm9CM3cvWExXUzZlYUxEL2lyCnRnRGs0VDBoT1Vibi9YSDA1Y01HREpGL3pIOEZITmI1QnVhbEtmREs3TzQ5ckNqazlteEhpZVJCMmFrVTYzNFBDK0RQQmcKUDdtSitEUkJtTm5melI1OG5ZNk9MUUdoaE1zSXpHWG9SQ3RLQnJDaE5SN29xTk9FaWRjOU5uNFBwZWVxVU9lNjRXLzFCRgpsOWFUckhvWHZDdGJ1SWZqaWVwUEtRMWZtbzN6VGkzVWVuRkZIU0xGWGRkcE1ISTNuNXdqL0l1TXB6TS9KWmRVZDN2V2tpCmJIanhpR1FFdXZsbjliMWt1V2laWXQ0bjlvemNRK1ZoY1gyTURxNEVxZnZZVWVDRWovSStSd1hON2tmM1o5d09neG1yV0wKdzhTZ2JLU1dVa291UmFvNDh4SDY2em9WUGtYWi9weUhBZ0N1RnZtRHJVYnNKWUg3bng1L1JKVmQwcGx6Wk5MeDRxRERPbAp1Y2IxL2Nxbi94dmMwTzNNNU9zRUdpc2dPNGZwM3dBQUFBTUJBQUVBQUFHQWFZaGhjTHdqejNSUE1uMCtISGx6aEhaeDgxCkFuL0R6akNHcFE5K1hNQnR1Vk1UWG9IQmtpZFJDZ010bG1Ld1RBZ2JvUk9GKzFYSXdOb2VML3JyM2FKMHF6Yk1uMWVLM24KQlQxdnZld1FGZENuWVpuemV1dEhYTEN1ZFpPMDZrSlFpaXdUQ1UxbTNvM2hUQittSmtGYldKV3ZTMWFGeUIwVXhtNFArSQpEaW5QbFFDbk4rbURYaDByemEwdjNGZUhIOVYxR29YQWxyd3piOXU2OEgyR3JxanBBODdZUGNHWlA5ekV1Rm42U1JsS1dWClIzNmRUQUFGK2JENnN0QkhxcmpzcUFKbW82RnE4QWVBRTJWRjkrZll1Z01FcmUxOVJ3alBVcmdJaTlXK3BmdVFmaDBPbUcKakFRd1VZZEtBY09FWkV5L2Fac3BveklOOU54ZFQ3bERmZk5DMGdvaTNkN0x6U01TRHBJK0pLL3FLbGlUb20vd09mME9aTApoemZEd2NLTmR4b0E5SlNPSDYvSTI0QmJzTFJsbWY0TW11aEpKaURMS1lFZ2pzUmtSSHcwUUNCZXhtK09LYi9WMDB4bGpLCnZIUkluV0l2NGg0eVBUOWVZdlNZcklvandkZHRZL3I1UHpGSDVWOWYwK1llTUgrL1VvcU5XN015bWV3WThqZjFlQkFBQUEKd0RnNzRIcUQ0WDFhSUptQW90TVRtWDh5bTJaZkZkTHkxTWdJcHczVTFlY3YybWxad05ZTjZDanA5b0t6Z3k1WTFmUmFQUgpZL2JEZ3hPSHk4b0pmR3h2V2JVazR3dmVzVXZ4UjlpdGJqU0xFTUJTVUJmVnVRbzRkbTlvS3ZnRjBqQU9SbSt3VWRsYy92CmNHTXFKNmd1M3V4TTRSZVUwUTRENElOKzkvSEZTQXhDZnhFWXFacFl2Si9jVWJWaWtNTmx3eEJjWWxYempwc0ZHbk1VOGUKOWNsbVNjcllQaW9zS1JBWjZpLzVjSTk1QkYrM3p3VlJWSWQwWjFnSE1FejNRU1hnQUFBTUVBN2JTeG9zRURVQXRvelBvbwpNUEZvS0syN3hBWStyN2tidXdxcE9uREhtbG5xZlJPd2RYV2N2QmlSdDdWYTVtVkVXNW1PY2NXdmNjUGY5Z0YrNWdKdmpzCndOOFEwNXRPakZuRUttaGxQaUJyOFRGTmh4Ym1palNRU2hTY015NHlJcGd4azFYM3VqWDk0MytaTWdkOVBxNVVrRk9VZVIKNjA0aDJ1TmxodFBNb3ZrOUZVcWhySGR3Z3NFUEpDd205c2hnWTdicG1aNEVSdjA0Z1JJV2NsYnFFVThOWHkrYTVhUVQ5VApwWlBCMU1STDg2SHUzbkhWRTA4MkRkMUs0QUkydzVBQUFBd1FEaXREbVpMMEJkNGxWMVg0UTZvKzlha0phOEpSaXpuOVoyCnlmQVlZVXlOR3d0MDBpRmZJZUQxdk9GcUNzNGhMTVY3aVZ3djEvdDhFaUxENlQrc3FySk5Mc0FtS240NU40U096UGRwMXgKRllKYk9jN3FkRXBDR2FvY2Z1Y2ZHWTJFa0xpMEFMYnNFbnZZMnVtTDdZVGJOVW5hd091aU5VZjlGeTdYczJlbE9wYU8vUwowQitWaWtIeXdETjRDN29XU1J5ZW45cFpmeTZ4NmZhcXpUUHUwMnpCS0dUcW1NSjlENVJTT3V6eHE1ZkpWNVVQNTVXZVlWCm9BOHpHSGhMU1VOdGNBQUFBWGJHOWpiMkZzYVdWdVFHMWhZMnQzYjNKcmN5MU5RbEFCQWdNRQotLS0tLUVORCBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0K
strategy:
  matrix:
    Python27:
      python.version: '2.7'
    Python35:
      python.version: '3.5'
    Python36:
      python.version: '3.6'
 
steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'
- script: |
    git checkout ${BUILD_SOURCEBRANCHNAME}
    AWS_CODECOMMIT_REPO="ssh://git-codecommit.${CODECOMMIT_REGION}.amazonaws.com/v1/repos/${CODECOMMIT_NAME}"
    mkdir ~/.ssh
    echo $(AWS_PRIVATE_KEY) > ~/.ssh/codecommit_rsa.tmp
    base64 -d ~/.ssh/codecommit_rsa.tmp > ~/.ssh/aws_rsa
    chmod 600 ~/.ssh/aws_rsa 
    cat <<EOF > ~/.ssh/config
      Host git-codecommit.*.amazonaws.com
      User ${CODECOMMIT_USER}
      IdentityFile ~/.ssh/aws_rsa
    EOF
    set +e
    ssh -o StrictHostKeyChecking=no git-codecommit.${CODECOMMIT_REGION}.amazonaws.com
    set -e
    git remote set-url origin --push ${AWS_CODECOMMIT_REPO}
    git push origin ${BUILD_SOURCEBRANCHNAME}
  displayName: 'Push AWS CodeCommit'
- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
    pip install pytest
    pip install pytest-cov
    pip install numpy
    pip install pudb
    pip install pylint
    pip install pyflakes
    pip install pycodestyle
    pip install bandit
  displayName: 'Install dependencies' 
- script: |
    pycodestyle --show-source --show-pep8 startup.py
    pycodestyle --show-source --show-pep8 hello_app/*.py
  displayName: 'Analisis codigo estatico - pycodestyle'
- script: |
    pyflakes startup.py
  displayName: 'Analisis codigo estatico - pyflakes'
- script: |
    pylint startup.py
  displayName: 'Analisis codigo estatico - Pylint'
- script: |
    pytest -v --cov coverage_example
  displayName: 'pruebas de cobertura - pytest-cov'
- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'sonarcloud'
    organization: 'locoalien'
    scannerMode: 'MSBuild'
    projectKey: 'sonarcloud_datalake'
    projectName: 'sonarcloud data lake'
- task: SonarCloudAnalyze@1
- script: |
    bandit -r devsecops_example
  displayName: 'Analisis vulnerabilidades Python - Bandit' 
- task: PythonScript@0
  inputs:
    scriptSource: inline
    script: |
      import sys
      print ('Executing script file is:', str(sys.argv[0]))
      print ('The arguments are:', str(sys.argv))
      import argparse
      parser = argparse.ArgumentParser()
      parser.add_argument("--world", help="Provide the name of the world to greet.")
      args = parser.parse_args()
      print ('Hello ', args.world)
    arguments: --world Venus

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: '**/test-*.xml'
    testRunTitle: 'Publish test results for Python $(python.version)'
