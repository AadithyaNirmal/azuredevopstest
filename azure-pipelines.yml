# Python AWS Azure DevOps
# Autor: Santiago Gonzalez A

trigger:
- master
- dev
pool:
  vmImage: 'ubuntu-latest'
variables:
  - group: aws_variables 
strategy:
  matrix:
    Python35:
      python.version: '3.5'
    Python36:
      python.version: '3.6'
steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'
- script: | 
    python -m pip install --upgrade pip
    pip install -r requirements.txt
    pip install pytest
    pip install pytest-cov
    pip install numpy
    pip install pudb
    pip install pylint
    pip install pyflakes
    pip install pycodestyle
    pip install bandit
  displayName: 'Install dependencies' 
- script: |
    pycodestyle --show-source --show-pep8 startup.py
    pycodestyle --show-source --show-pep8 hello_app/*.py
  displayName: 'Analisis codigo estatico - pycodestyle'
- script: |
    pyflakes startup.py
  displayName: 'Analisis codigo estatico - pyflakes'

- task: CmdLine@2
  displayName: Analisis codigo estatico - Pylint
  inputs:
    script: |
      echo "**** Creacion archivo configuracion Pylint para AWS SDFL ****"
      pylint --generate-rcfile > $(System.DefaultWorkingDirectory)/pylintrc
      echo "**** Agregando excepciones a AWS Lambda functions ****"
      echo "Config - Ignorando 'librerias importadas'"
      sed -i 's/ignored-modules=/ignored-modules=datalake_library, datalake_library.octagon/g' $(System.DefaultWorkingDirectory)/pylintrc

      # C0111 => Missing docstring
      # W0108 => unnecessary lambda
      # W0142 => Used * or ** magic
      # R0921 => Abstract class not referenced
      # R0205 => Useless object inheritence: codebase still supports 2.7
      # E0401 => Unable to import 'datalake_library'
      # C0301 => Line too long (119/100) (line-too-long)
      # C0103 => Variable name "X" doesn't conform to snake_case naming style (invalid-name)
      # C0116 => Missing function or method docstring (missing-function-docstring)

      sed -i 's/disable=/disable=I, C0111, W0108, W0142, R0921, R0205, C0114, E0401, C0301, C0103, C0116, /g' $(System.DefaultWorkingDirectory)/pylintrc
      for file in $(find . -name "*py")
      do
        pylint $file --rcfile=$(System.DefaultWorkingDirectory)/pylintrc
      done
- script: |
    pytest --junitxml=$(Build.StagingDirectory)/test.xml --cov --cov-report=xml --cov-report=html --cov coverage_example
  displayName: 'pruebas de cobertura - pytest-cov'
- task: PublishTestResults@2
  displayName: 'Publicar resultado Pytest-cov /test.xml'
  inputs:
    testResultsFiles: '$(Build.StagingDirectory)/test.xml'
    testRunTitle: 010
- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'sonarcloud'
    organization: 'locoalien'
    scannerMode: 'CLI'
    configMode: 'manual' 
    cliProjectKey: 'sonarcloud_datalake'
    cliProjectName: 'sonarcloud data lake'
    cliSources: '.'
    extraProperties: |
      sonar.python.coverage.reportPath=$(System.DefaultWorkingDirectory)/coverage.xml
- task: SonarCloudAnalyze@1
- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '30'
- task: PublishCodeCoverageResults@1
  displayName: 'Sonar Resultado Cobertura'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/htmlcov'
    additionalCodeCoverageFiles: '$(System.DefaultWorkingDirectory)/**'
# bandit -r devsecops_example
- script: |
    bandit -r hello_app
    echo 'Por el momento vacio para que el Pipeline se ejecute sin problema script: bandit -r devsecops_example'
  displayName: 'Analisis vulnerabilidades Python - Bandit' 
- script: |
    git checkout ${BUILD_SOURCEBRANCHNAME}
    AWS_CODECOMMIT_REPO="ssh://git-codecommit.${CODECOMMIT_REGION}.amazonaws.com/v1/repos/${CODECOMMIT_NAME}"
    mkdir ~/.ssh
    echo $(AWS_PRIVATE_KEY) > ~/.ssh/codecommit_rsa.tmp
    base64 -d ~/.ssh/codecommit_rsa.tmp > ~/.ssh/aws_rsa
    chmod 600 ~/.ssh/aws_rsa 
    cat <<EOF > ~/.ssh/config
      Host git-codecommit.*.amazonaws.com
      User ${CODECOMMIT_USER}
      IdentityFile ~/.ssh/aws_rsa
    EOF
    set +e
    ssh -o StrictHostKeyChecking=no git-codecommit.${CODECOMMIT_REGION}.amazonaws.com
    set -e
    git remote set-url origin --push ${AWS_CODECOMMIT_REPO}
    git push origin ${BUILD_SOURCEBRANCHNAME}
  displayName: 'Push AWS CodeCommit'
- task: PythonScript@0
  inputs:
    scriptSource: inline
    script: |
      import sys
      print ('Executing script file is:', str(sys.argv[0]))
      print ('The arguments are:', str(sys.argv))
      import argparse
      parser = argparse.ArgumentParser()
      parser.add_argument("--world", help="Provide the name of the world to greet.")
      args = parser.parse_args()
      print ('Hello ', args.world)
    arguments: --world Venus

