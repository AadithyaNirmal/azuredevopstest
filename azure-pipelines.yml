# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master
- dev

pool:
  vmImage: 'ubuntu-latest'
name: ${Date:yyyMMdd}${Rev:.r}
variables:
  - group: aws_variables
  - name: CODECOMMIT_PK
    value: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0NCmIzQmxibk56YUMxclpYa3RkakVBQUFBQUJHNXZibVVBQUFBRWJtOXVaUUFBQUFBQUFBQUJBQUFCbHdBQUFBZHpjMmd0Y24NCk5oQUFBQUF3RUFBUUFBQVlFQW9ZRmJaVElDTVVzNFU2T0U4MmlFWVBaRE9KZzA3eFJqVDA5bThWOFhRUklGekRsMkJKa2oNCmgvR0ZGZURuc0RJQmpzMGhOaTdEZGVPSFBHdXJuTHkrTG84cGJqUmM3akQ1OGY2VVJwZHhIRlpqc0VjVTZPY21nbVBKMDENCkc0aVd2S0ZSSTJQOW5odlllTUEzcklwc1NFM1l4MktVblhpc1YxaEMwV0NBZUVyWGR5Wi9SYXlpOTN4eXFnUXllTU9HK1ENCnFwVkxQSmRCdFNjUVIzenNrRjgxcnprVnlPM0VIK052M2FzblFzbzEwSE1vSXUyQWtRMnJaY0FCcEJqVm1RWHBVN0tmd04NCnU3UWMwN082MldxUmd4SmJWRUFvdStyZy81TjJxb1lXcEFOa2lieFMxQlF1MG90WllURXFWZkJhYkRibVo2UUVYbklRaUkNCitPWXNYYXVHbEp4andSVWVKZWI5anU5R05oMG1EdVNxN0tRdlJTb3FSRkVRQkUvSEFocXpUYlFONlI1aGpnS3ZIdjFwUDYNCi9BWWpiYVBqWFhwQ25mSGxFYy9DMXRkQm1tKzllOTN0RXZZUHl0UzdTajdwVFl2Ry96VGczWUpIcGtIdXdNM2NyOU5yVWQNCjZzQWx0QktUK1Q5ZGdBRVdtVE45OGR0Q2dXdm12R2ZIcVp3UVJiL2RBQUFGb0twYnhheXFXOFdzQUFBQUIzTnphQzF5YzINCkVBQUFHQkFLR0JXMlV5QWpGTE9GT2poUE5vaEdEMlF6aVlOTzhVWTA5UFp2RmZGMEVTQmN3NWRnU1pJNGZ4aFJYZzU3QXkNCkFZN05JVFl1dzNYamh6eHJxNXk4dmk2UEtXNDBYTzR3K2ZIK2xFYVhjUnhXWTdCSEZPam5Kb0pqeWROUnVJbHJ5aFVTTmoNCi9aNGIySGpBTjZ5S2JFaE4yTWRpbEoxNHJGZFlRdEZnZ0hoSzEzY21mMFdzb3ZkOGNxb0VNbmpEaHZrS3FWU3p5WFFiVW4NCkVFZDg3SkJmTmE4NUZjanR4Qi9qYjkyckowTEtOZEJ6S0NMdGdKRU5xMlhBQWFRWTFaa0Y2Vk95bjhEYnUwSE5PenV0bHENCmtZTVNXMVJBS0x2cTRQK1RkcXFHRnFRRFpJbThVdFFVTHRLTFdXRXhLbFh3V213MjVtZWtCRjV5RUlpUGptTEYycmhwU2MNClk4RVZIaVhtL1k3dlJqWWRKZzdrcXV5a0wwVXFLa1JSRUFSUHh3SWFzMDIwRGVrZVlZNENyeDc5YVQrdndHSTIyajQxMTYNClFwM3g1UkhQd3RiWFFacHZ2WHZkN1JMMkQ4clV1MG8rNlUyTHh2ODA0TjJDUjZaQjdzRE4zSy9UYTFIZXJBSmJRU2svay8NClhZQUJGcGt6ZmZIYlFvRnI1cnhueDZtY0VFVy8zUUFBQUFNQkFBRUFBQUdBVnVaaWhmVzloa2FCL1VicjM0aXFTZjNYdDUNCmoyU25uKzRZckl5akV2TXZ6K2o1K1BaL1A2VVVoY0lxU01KWnNTaVlMSVR2NGtmOGM0V2dOWktKSEtCd1ZTOXBCSVBJV3YNCngwMEMvV1M1SU5VKytIZVd3YWEyYXN4RXFXYThVM3pqRkNsamRVSElIQkhWL1gxUWY2TVlGcGxnYnVEamtEQ2xCY1M0cVENCk5hbVhlKzRENXpwM3laQjFwaE55RU5hc1JrNDlSRzBraFV1Nk5VT0JMNHVzbnYrZU5PWEhuSzRKbWc5SFlHUHdMTXArZCsNCmZpU3EyK0d1Q3FhZ2UybzliQVBvWi9DN05OM3JuejIrME9MalRFdHRac2tTMU5Bb0xRUHkzWE9sZ09Cd3BPRndiSC9tbnINClpTSmJzRGt4emorVk9SU2dhTGQxTllMWFE4NmVjZndkUngxTVhvZUFjeTRaMVdMdG9YQzZRNkNEL1JteVptWStKVi9nc3gNClAvMUlwTWRRdWpWcUEvaFYxVG9IUU5DOWtobmhGQjZqb2pxZ21VaEtGNWRKQk00NlRnY3VjNHVENEdqMVJEKzBWbDNpNHANClk3aTVNWUhYQVlUMk1WWmg2azJRN0JPYk9SMHR3K1JKcllYODVWSStIYm9SYVRGTzJ1Yk9WWnJybXRnTXVQOUFPaEFBQUENCndRQzN5Zzdrem14Mnl3UXZOU0hWeTJMQ0Y0YlRacENaN2RhOEs5UC9jWlNDekFhYW11a0p0cHRHb3JySXVMdWJNVGQ0dTcNCjZWSWR3NGFvZFpXbVRIdlpUTmtEdGJvVGxLRFNRQlpFSFFyWG1NWjJJWm92M2ExdnZQWHdHYUN3ck1JSFAvMnBCRW9UN24NCjkzVUovaUlQdmlFQWJkUTlwM05uVFFUcFAxUHlqUlhjVzAvZW4zNXE5L2ZEK0taYlVqMFNWN0RaTTR0VC84emc3ekx2ZVcNCkF3THcyeEx4RFVjRkZZa3pkR091dlpKRU1ZZUVsQ0tpZVl3K3NBb3MwK2JuTWFlc0FBQUFEQkFOUnNCTnFLWVlwdFF6VWoNCkRQSS92N2dGTnJ1U3VXQTY5WXVhd2JQNkcyZGdtOW1RSWxpOFo5Vk9qUEtMUkF2anZjbXB4SDd1ZHFwWE9MdTBycGIyQXENCmVUL1I3ZU9jQk1ENTdyeU01bTVVLytrRHVLcWY4NnNscFFFd3o0cHNDeEMrQUU1Q1FFUlpOMWZ6MUtiNlN0SUpqODA0RWcNCmJZZ0ptaUJETy9IMmVuTi8wcFBoNU5ZSkwzOFZYeVBJU2hGYmYrcVlWTk1iNnJlZ1NtV0c4bW12S1BTR01MUlJoZ0lSUEQNCmozOGZLekZVSjBETFlmZU5zNlFZKzdQNWR0aUV5Y1dRQUFBTUVBd3FOTDJmSStrRkNaZmZHMFpuQk1FWDR1Sm05SUtGMGINCkxya2loN3M5OEdqSkFEeCtLbExINDN5dGI1bVY3cUxPWHUrZWNmY0tlUjFIREJTNU5HalB1d0FveTdMdXdnVWdWVkJnNGoNCkk0OWJYK3ZCcjdyMFRXSm1HNDB6S1B0cmtaMHROb3pheFdGcndjU0ErNCt3SjhKQWlSU3FXRmZvWjZBUHdDS0h4bS9VQXANClNCajlOY2taSGFNSHp3RWdabUdkb1B5amdlUWRMdmx4TzBkTlo0ODhMYVdpUzlyb3VOdU1leWRucytlY04rb01hQkF0OWMNCk1pSXNFcGV3TUlXMzhsQUFBQUpXeHZZMjloYkdsbGJrQnRZV05yZDI5eWEzTXRUV0ZqUW05dmF5MVFjbTh1Ykc5allXd0INCkFnTUVCUT09DQotLS0tLUVORCBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0=
strategy:
  matrix:
    Python27:
      python.version: '2.7'
    Python35:
      python.version: '3.5'
    Python36:
      python.version: '3.6'
 
steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'
- script: |
    git checkout ${BUILD_SOURCEBRANCHNAME}
    AWS_CODECOMMIT_REPO="ssh://git-codecommit.${CODECOMMIT_REGION}.amazonaws.com/v1/repos/${CODECOMMIT_NAME}"
    mkdir ~/.ssh
    echo ${CODECOMMIT_PK} > ~/.ssh/codecommit_rsa.tmp
    base64 -d ~/.ssh/codecommit_rsa.tmp > ~/.ssh/aws_rsa
    cat ~/.ssh/aws_rsa
    chmod 400 ~/.ssh/aws_rsa 
    cat <<EOF > ~/.ssh/config
      Host git-codecommit.*.amazonaws.com
      User ${CODECOMMIT_USER}
      IdentityFile ~/.ssh/aws_rsa
    EOF
    echo ${CODECOMMIT_USER}
    set +e
    ssh -o StrictHostKeyChecking=no git-codecommit.${CODECOMMIT_REGION}.amazonaws.com
    set -e
    git remote set-url origin --push ${AWS_CODECOMMIT_REPO}
    git push origin ${BUILD_SOURCEBRANCHNAME}
- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Install dependencies'

- script: |
    pip install pytest pytest-azurepipelines
    pytest
  displayName: 'pytest'

- task: PythonScript@0
  inputs:
    scriptSource: inline
    script: |
      import sys
      print ('Executing script file is:', str(sys.argv[0]))
      print ('The arguments are:', str(sys.argv))
      import argparse
      parser = argparse.ArgumentParser()
      parser.add_argument("--world", help="Provide the name of the world to greet.")
      args = parser.parse_args()
      print ('Hello ', args.world)
    arguments: --world Venus

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: '**/test-*.xml'
    testRunTitle: 'Publish test results for Python $(python.version)'
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'